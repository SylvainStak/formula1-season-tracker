{"version":3,"sources":["components/Home.js","components/Schedule.js","components/Nav.js","components/Constructor.js","components/Results/Race.js","components/Results/Qualifying.js","components/Results/FastestLap.js","components/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Home","props","state","driverStandingsData","season","a","axios","get","then","response","setState","data","MRData","StandingsTable","StandingsLists","DriverStandings","this","renderDriverStandings","map","driver","className","position","src","Driver","driverId","width","height","alt","nationality","givenName","familyName","Constructors","constructorId","name","points","wins","length","scope","role","Component","Schedule","seasonSchedule","nextRound","RaceTable","Races","round","renderSeasonSchedule","Circuit","circuitId","raceName","circuitName","date","time","substring","to","style","textDecoration","parseInt","type","Location","locality","country","Nav","nextRaceData","constUri","Constructor","constructorStandingsData","ConstructorStandings","renderConstructorStandings","constructor","Race","pos","grid","diff","Math","abs","newGrid","raceResults","renderRaceResults","Results","laps","positionImproved","getGridPositionDiff","Time","status","FastestLap","rank","Qualifying","qualifyingResults","renderQualifyingResults","QualifyingResults","Q1","Q2","Q3","fastestLaps","results","f","push","driverName","lapData","sort","b","renderFastestLaps","lap","AverageSpeed","speed","activeTab","match","params","roundId","onClick","App","appUri","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cc6cbf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../Home.css';\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      driverStandingsData: [],\r\n      season: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get driver standings\r\n    await axios.get('https://ergast.com/api/f1/current/driverstandings.json')\r\n      .then(response => {\r\n        this.setState({\r\n          driverStandingsData: response.data.MRData.StandingsTable.StandingsLists[0].DriverStandings,\r\n          season: response.data.MRData.StandingsTable.season,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      driverStandingsData,\r\n      season,\r\n    } = this.state;\r\n\r\n    /* RENDER TABLE ROW FOR EACH DRIVER */\r\n    const renderDriverStandings = driverStandingsData.map(driver => (\r\n      <tr key={driver.Driver.driverId}>\r\n        <td className=\"align-middle\">{driver.position}</td>\r\n        <td className=\"align-middle\">\r\n          <img\r\n            src={`/formula1-season-tracker/drivers/${driver.Driver.driverId}.png`}\r\n            width=\"100\"\r\n            height=\"100\"\r\n            alt={driver.Driver.driverId}/>\r\n        </td>\r\n        <td className=\"align-middle\">\r\n          <img\r\n            src={`/formula1-season-tracker/flags/${driver.Driver.nationality}.png`}\r\n            width=\"32\"\r\n            height=\"32\"\r\n            className=\"flagimg\"\r\n            alt={driver.Driver.nationality}/>\r\n          {`${driver.Driver.givenName} ${driver.Driver.familyName}`}\r\n        </td>\r\n        <td className=\"align-middle\">\r\n          <img\r\n            src={`/formula1-season-tracker/constructors/${driver.Constructors[0].constructorId}.png`}\r\n            width=\"50\"\r\n            height=\"50\"\r\n            alt={driver.Constructors[0].constructorId}/>\r\n        </td>\r\n        <td className=\"align-middle\">{driver.Constructors[0].name}</td>\r\n        <td className=\"align-middle points-column\">{driver.points}</td>\r\n        <td className=\"align-middle points-column\">{driver.wins}</td>\r\n      </tr>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n      {/* RENDER DRIVERS TABLE IF THERE IS AVAILABLE DATA */}\r\n      {driverStandingsData && driverStandingsData.length > 0 ? (\r\n        <>\r\n          <h1\r\n            className=\"text-center text-light mt-2\"\r\n          >\r\n            {season} DRIVER STANDINGS\r\n          </h1>\r\n          <div className=\"container mt-4 table-responsive\">\r\n            <table className=\"table text-light\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Pos.</th>\r\n                  <th scope=\"col\"></th>\r\n                  <th scope=\"col\">Driver</th>\r\n                  <th scope=\"col\"></th>\r\n                  <th scope=\"col\">Constructor</th>\r\n                  <th scope=\"col\">Points</th>\r\n                  <th scope=\"col\">Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {renderDriverStandings}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      ):(\r\n        <>\r\n        {/* LOADING SPINNER */}\r\n          <div className=\"text-center mt-5\">\r\n            <div className=\"spinner-border text-warning\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../Schedule.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Schedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      seasonSchedule: [],\r\n      nextRound: null,\r\n      season: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get current season schedule\r\n    await axios.get('https://ergast.com/api/f1/current.json')\r\n      .then(response => {\r\n        this.setState({\r\n          seasonSchedule: response.data.MRData.RaceTable.Races,\r\n          season: response.data.MRData.RaceTable.season,\r\n        });\r\n      });\r\n\r\n    // Get next round schedule\r\n    await axios.get('https://ergast.com/api/f1/current/next.json')\r\n      .then(response => {\r\n        this.setState({\r\n          nextRound: response.data.MRData.RaceTable.round,\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      seasonSchedule,\r\n      nextRound,\r\n      season,\r\n    } = this.state;\r\n\r\n    /* RENDER INFO BANNER FOR EACH RACE IN THE SCHEDULE */\r\n    const renderSeasonSchedule = seasonSchedule.map(round => (\r\n      <div\r\n        className=\"schedule-item bg-warning d-flex\"\r\n        key={round.Circuit.circuitId}>\r\n        <div className=\"circuit-img-container d-none d-md-block\">\r\n          <img\r\n            src={`/formula1-season-tracker/circuits/${round.Circuit.circuitId}.png`}\r\n            width=\"154.5\"\r\n            height=\"116.25\"\r\n            alt={round.Circuit.circuitId}\r\n            className=\"mt-1\" />\r\n        </div>\r\n        <div className=\"info-container mt-2 ml-2\">\r\n          <div>{`Round ${round.round}`}</div>\r\n          <div><span className=\"race-name\">{round.raceName}</span></div>\r\n          <div className=\"d-block d-xs-none\"><em>{round.Circuit.circuitName}</em></div>\r\n          <div><em>{`${round.date} / ${round.time.substring(0,5)} (UTC)`}</em></div>\r\n          <div className=\"\">\r\n            <Link\r\n              to={`/formula1-season-tracker/results/${round.round}`}\r\n              style={{ textDecoration: 'none' }}\r\n              className={`${round.round && round.round >= parseInt(nextRound) ? 'disabled-link' : ''}`}\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className={`btn btn-primary mt-1 results-button ${round.round && round.round >= parseInt(nextRound) ? 'disabled' : ''}`}\r\n              >\r\n                Race Results &gt;\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"ml-auto\">\r\n          <div className=\"d-none d-sm-block mt-3 mr-1 mr-md-3 race-country-name\">\r\n            <span className=\"float-right\">{`${round.Circuit.Location.locality} (${round.Circuit.Location.country})`}</span>\r\n          </div>\r\n          <div>\r\n          <img\r\n            src={`/formula1-season-tracker/flags/scheduleflags/${round.Circuit.Location.country}.png`}\r\n            alt={round.Circuit.circuitId}\r\n            className=\"float-right mr-1 mr-md-3\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        {/* RENDER SEASON SCHEDULE IF THERE IS AVAILABLE DATA */}\r\n        {seasonSchedule && seasonSchedule.length > 0 ? (\r\n          <>\r\n            <h1\r\n              className=\"text-center text-light mt-2\"\r\n            >\r\n              {season} SEASON SCHEDULE\r\n            </h1>\r\n            <div className=\"container\">\r\n              {renderSeasonSchedule}\r\n            </div>\r\n          </>\r\n        ) :\r\n        (\r\n          <>\r\n          {/* LOADING SPINNER */}\r\n            <div className=\"text-center mt-5\">\r\n              <div className=\"spinner-border text-warning\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Schedule;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../Nav.css';\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      nextRaceData: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get next round race schedule\r\n    await axios.get('https://ergast.com/api/f1/current/next.json')\r\n      .then(response => {\r\n        this.setState({\r\n          nextRaceData: response.data.MRData.RaceTable.Races[0],\r\n        });\r\n      });\r\n  }\r\n\r\n  render() { \r\n    const {\r\n      constUri,\r\n    } = this.props;\r\n\r\n    const {\r\n      nextRaceData,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container-fluid link-nav-bar\">\r\n          <div className=\"row link-nav-bar-row\">\r\n              {/* LINK --> DRIVERS STANDINGS */}\r\n              <Link\r\n                to={`${constUri}`}\r\n                style={{ textDecoration: 'none' }}\r\n                className=\"col-xs-4 col-md-2 bg-warning text-dark text-center\"\r\n              >\r\n                Driver Standings\r\n              </Link>\r\n\r\n              {/* LINK --> CONSTRUCTORS STANDINGS */}\r\n              <Link\r\n                to={`${constUri}/constructor`}\r\n                style={{ textDecoration: 'none' }}\r\n                className=\"col-xs-4 col-md-2 bg-warning text-dark text-center midlink\"\r\n              >\r\n                Constructor Standings\r\n              </Link>\r\n\r\n              {/* LINK --> SCHEDULE / RACE RESULTS */}\r\n              <Link\r\n                to={`${constUri}/schedule`}\r\n                style={{ textDecoration: 'none' }}\r\n                className=\"col-xs-4 col-md-2 bg-warning text-dark text-center\"\r\n              >\r\n                Schedule\r\n              </Link>\r\n\r\n              {/* NEXT RACE DATA */}\r\n              <div\r\n                className=\"col-xs-12 col-md-6 bg-dark text-light d-flex justify-content-around\"\r\n              >\r\n                <div className=\"mt-3 next-race-title\">Next Race:</div>\r\n                {nextRaceData !== null ? \r\n                (\r\n                  <>\r\n                  <div>\r\n                    <div className=\"mt-1 next-race-location\">{`${nextRaceData.raceName}, ${nextRaceData.Circuit.circuitName}`}</div>\r\n                    <div>{`${nextRaceData.date} / ${nextRaceData.time.substring(0,5)} (UTC)`}</div>\r\n                  </div>\r\n                  <div className=\"mt-1\">\r\n                    <div>\r\n                      {`${nextRaceData.Circuit.Location.locality} (${nextRaceData.Circuit.Location.country})`}\r\n                    </div>\r\n                    <div>\r\n                    <img\r\n                      src={`/formula1-season-tracker/flags/scheduleflags/${nextRaceData.Circuit.Location.country}.png`}\r\n                      width=\"50\"\r\n                      height=\"50\"\r\n                      alt={nextRaceData.Circuit.Location.country}/>\r\n                    </div>\r\n                  </div>\r\n                  </>\r\n                ) : \r\n                (\r\n                  <>\r\n                    {/* LOADING SPINNER */}\r\n                    <div className=\"spinner-border text-warning mt-3\" role=\"status\">\r\n                      <span className=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                  </>\r\n                )\r\n                }\r\n              </div>\r\n          </div>  \r\n        </div> \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Constructor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      constructorStandingsData: [],\r\n      season: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Get constructor standings\r\n    await axios.get('https://ergast.com/api/f1/current/constructorstandings.json')\r\n    .then(response => {\r\n      this.setState({\r\n        constructorStandingsData: response.data.MRData.StandingsTable.StandingsLists[0].ConstructorStandings,\r\n        season: response.data.MRData.StandingsTable.season,\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      constructorStandingsData,\r\n      season,\r\n    } = this.state;\r\n\r\n    /* RENDER TABLE ROW FOR EACH CONSTRUCTOR */\r\n    const renderConstructorStandings = constructorStandingsData.map(constructor => (\r\n      <tr key={constructor.Constructor.constructorId}>\r\n        <td className=\"align-middle\">{constructor.position}</td>\r\n        <td className=\"align-middle\">\r\n          <img\r\n            src={`/formula1-season-tracker/constructors/${constructor.Constructor.constructorId}.png`}\r\n            width=\"50\"\r\n            height=\"50\"\r\n            alt={constructor.Constructor.constructorId}/>\r\n        </td>\r\n        <td className=\"align-middle\">{constructor.Constructor.name}</td>\r\n        <td className=\"align-middle\">\r\n          <img\r\n            src={`/formula1-season-tracker/cars/${constructor.Constructor.constructorId}.png`}\r\n            height=\"50\"\r\n            alt={constructor.Constructor.constructorId}/>\r\n        </td>\r\n        <td className=\"align-middle points-column\">{constructor.points}</td>\r\n        <td className=\"align-middle points-column\">{constructor.wins}</td>\r\n      </tr>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        {/* RENDER CONSTRUCTORS TABLE IF THERE IS AVAILABLE DATA */}\r\n        {constructorStandingsData && constructorStandingsData.length > 0 ? (\r\n        <>\r\n          <h1\r\n            className=\"text-center text-light mt-2\"\r\n          >\r\n            {season} CONSTRUCTOR STANDINGS\r\n          </h1>\r\n          <div className=\"container mt-4 table-responsive\">\r\n            <table className=\"table text-light\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Pos.</th>\r\n                  <th scope=\"col\"></th>\r\n                  <th scope=\"col\">Constructor</th>\r\n                  <th scope=\"col\"></th>\r\n                  <th scope=\"col\">Points</th>\r\n                  <th scope=\"col\">Wins</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {renderConstructorStandings}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      ):(\r\n        <>\r\n          {/* LOADING SPINNER */}\r\n          <div className=\"text-center mt-5\">\r\n            <div className=\"spinner-border text-warning\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Constructor;","import React, { Component } from 'react';\r\nimport '../../Race.css';\r\n\r\nclass Race extends Component {\r\n  // Returns the difference between the starting and finish position\r\n  getGridPositionDiff(pos, grid) {\r\n    let diff = Math.abs(parseInt(pos) - parseInt(grid));\r\n    // if grid == 0 then grid position was pits\r\n    if (parseInt(grid) === 0) diff = Math.abs(parseInt(pos) - 20);\r\n    return diff;\r\n  }\r\n\r\n  // Returns true if driver improved the starting position\r\n  positionImproved(pos, grid) {\r\n    let newGrid = grid;\r\n    if(parseInt(grid) === 0) newGrid = 20;\r\n    return parseInt(newGrid) > parseInt(pos);\r\n  }\r\n\r\n  render() {\r\n    const { raceResults } = this.props;\r\n\r\n    /* RENDER RACE RESULTS FOR EACH DRIVER */\r\n    const renderRaceResults = raceResults && raceResults !== null && raceResults.Results.map(driver => (\r\n      <tr key={driver.Driver.driverId}>\r\n        <td className=\"align-middle\">{driver.position && driver.position}</td>\r\n        <td className=\"align-middle\">\r\n          {`${driver.Driver.givenName && driver.Driver.givenName} ${driver.Driver.familyName && driver.Driver.familyName}`}\r\n        </td>\r\n        <td className=\"align-middle\">{driver.Constructor.name && driver.Constructor.name}</td>\r\n        <td className=\"align-middle\">{driver.laps && driver.laps}</td>\r\n        <td className=\"align-middle\">\r\n          {driver.grid && driver.grid === \"0\" ? 'Pits' : driver.grid}\r\n        </td>\r\n        <td className=\"align-middle\">\r\n        {this.positionImproved(driver.position, driver.grid) ?\r\n          <>\r\n            <span className=\"mr-1 text-success\">\r\n              {this.getGridPositionDiff(driver.position, driver.grid)}\r\n            </span>\r\n            <i className=\"fas fa-angle-double-up text-success\"></i>\r\n          </> : \r\n          parseInt(driver.grid) < parseInt(driver.position) ?\r\n          <>\r\n            <span className=\"mr-1 text-danger\">\r\n              {this.getGridPositionDiff(driver.position, driver.grid)}\r\n            </span>\r\n            <i className=\"fas fa-angle-double-down text-danger\"></i>\r\n          </> : ''}\r\n        </td>\r\n        <td className=\"align-middle\">{driver.Time && driver.Time.time}</td>\r\n        <td className=\"align-middle\">{driver.status && driver.status}</td>\r\n        <td className=\"align-middle d-flex\">\r\n          {driver.points && driver.points}\r\n          {driver.FastestLap && driver.FastestLap.rank === \"1\" && <i className=\"ml-3 mt-2 fas fa-stopwatch fa-xs\"></i>}\r\n        </td>\r\n      </tr>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        {/* RENDER RACE RESULTS IF THERE IS AVAILABLE DATA */}\r\n        {raceResults && raceResults !== null ? (\r\n          <>\r\n            <div className=\"container mt-4 table-responsive\">\r\n              <table className=\"table table-sm text-light\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Pos.</th>\r\n                    <th scope=\"col\">Driver</th>\r\n                    <th scope=\"col\">Constructor</th>\r\n                    <th scope=\"col\">Laps</th>\r\n                    <th scope=\"col\">Grid</th>\r\n                    <th scope=\"col\"></th>\r\n                    <th scope=\"col\">Time</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th scope=\"col\">Points</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {renderRaceResults}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </>\r\n        ):(\r\n          <>\r\n          {/* LOADING SPINNER */}\r\n            <div className=\"text-center mt-5\">\r\n              <div className=\"spinner-border text-warning\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Race;","import React, { Component } from 'react';\r\n\r\nclass Qualifying extends Component {\r\n  render() {\r\n    const { qualifyingResults } = this.props;\r\n\r\n    /* RENDER QUALIFYING RESULTS FOR EACH DRIVER */\r\n    const renderQualifyingResults =\r\n      qualifyingResults &&\r\n      qualifyingResults !== null &&\r\n      qualifyingResults.QualifyingResults.map(driver => (\r\n      <tr key={driver.Driver.driverId}>\r\n        <td className=\"align-middle\">{driver.position && driver.position}</td>\r\n        <td className=\"align-middle\">{`${driver.Driver.givenName} ${driver.Driver.familyName}`}</td>\r\n        <td className=\"align-middle\">{driver.Constructor.name}</td>\r\n        <td className=\"align-middle\">{driver.Q1}</td>\r\n        <td className=\"align-middle\">{driver.Q2}</td>\r\n        <td className=\"align-middle\">{driver.Q3}</td>\r\n      </tr>\r\n    ));\r\n    return (\r\n      <>\r\n        {/* RENDER QUALIFYING RESULTS IF THERE IS AVAILABLE DATA */}\r\n        {qualifyingResults && qualifyingResults !== null ? (\r\n          <>\r\n            <div className=\"container mt-4 table-responsive\">\r\n              <table className=\"table table-sm text-light\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Pos.</th>\r\n                    <th scope=\"col\">Driver</th>\r\n                    <th scope=\"col\">Constructor</th>\r\n                    <th scope=\"col\" className=\"pl-5\">Q1</th>\r\n                    <th scope=\"col\" className=\"pl-5\">Q2</th>\r\n                    <th scope=\"col\" className=\"pl-5\">Q3</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {renderQualifyingResults}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </>\r\n        ):(\r\n          <>\r\n          {/* LOADING SPINNER */}\r\n            <div className=\"text-center mt-5\">\r\n              <div className=\"spinner-border text-warning\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Qualifying;","import React, { Component } from 'react';\r\n\r\nclass FastestLap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fastestLaps: null,\r\n    };\r\n  }\r\n\r\n  // Extract fastestLaps array to state from raceResults prop\r\n  componentDidMount() {\r\n    const { raceResults } = this.props;\r\n    let results = raceResults.Results;\r\n    let fastestLaps = [];\r\n\r\n    for (let f = 0; f < results.length; f++) {\r\n      fastestLaps.push({\r\n        driverId: results[f].Driver.driverId,\r\n        driverName: `${results[f].Driver.givenName} ${results[f].Driver.familyName}`,\r\n        constructor: results[f].Constructor.name,\r\n        lapData: results[f].FastestLap || {rank: \"20\"},\r\n      });\r\n    }\r\n\r\n    // Order array based on fastest lap rank\r\n    fastestLaps.sort((a, b) => (parseInt(a.lapData.rank) > parseInt(b.lapData.rank)) ? 1 : -1);\r\n\r\n    this.setState({ fastestLaps });\r\n  }\r\n\r\n  render() {\r\n    const { fastestLaps } = this.state;\r\n    const { raceResults } = this.props;\r\n\r\n    /* RENDER FASTEST LAP FROM EACH DRIVER */\r\n    const renderFastestLaps =\r\n      fastestLaps &&\r\n      fastestLaps !== null &&\r\n      fastestLaps.length > 0 &&\r\n      fastestLaps.map(driver => (\r\n      <tr key={driver.driverId}>\r\n        <td className=\"align-middle\">{driver.lapData.rank}</td>\r\n        <td className=\"align-middle\">{driver.driverName}</td>\r\n        <td className=\"align-middle\">{driver.constructor}</td>\r\n        <td className=\"align-middle\">{driver.lapData.lap && driver.lapData.lap}</td>\r\n        <td className=\"align-middle\">{driver.lapData.Time && driver.lapData.Time.time}</td>\r\n        <td className=\"align-middle\">{driver.lapData.AverageSpeed && driver.lapData.AverageSpeed.speed}</td>\r\n      </tr>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        {/* RENDER FASTEST LAPS RESULTS IF THERE IS AVAILABLE DATA */}\r\n        {raceResults && raceResults !== null ? (\r\n          <>\r\n            <div className=\"container mt-4 table-responsive\">\r\n              <table className=\"table table-sm text-light\">\r\n                <thead>\r\n                  <tr>\r\n                    <th scope=\"col\">Pos.</th>\r\n                    <th scope=\"col\">Driver</th>\r\n                    <th scope=\"col\">Constructor</th>\r\n                    <th scope=\"col\">Lap</th>\r\n                    <th scope=\"col\">Time</th>\r\n                    <th scope=\"col\">Average Speed (kph)</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {renderFastestLaps}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </>\r\n        ):(\r\n          <>\r\n          {/* LOADING SPINNER */}\r\n            <div className=\"text-center mt-5\">\r\n              <div className=\"spinner-border text-warning\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FastestLap;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Race from './Results/Race';\r\nimport Qualifying from './Results/Qualifying';\r\nimport FastestLap from './Results/FastestLap';\r\nimport '../Results.css';\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    /*\r\n      Active Tabs\r\n      R --> Race\r\n      Q --> Qualifying\r\n      F --> Fastest Laps\r\n    */\r\n    this.state = {\r\n      activeTab: 'R',\r\n      raceResults: null,\r\n      qualifyingResults: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { match } = this.props;\r\n\r\n    // Get specific round race results\r\n    await axios.get(`https://ergast.com/api/f1/current/${match.params.roundId}/results.json`)\r\n      .then(response => {\r\n        this.setState({\r\n          raceResults: response.data.MRData.RaceTable.Races[0],\r\n        });\r\n      });\r\n\r\n    // Get specific round qualifying results\r\n    await axios.get(`https://ergast.com/api/f1/current/${match.params.roundId}/qualifying.json`)\r\n      .then(response => {\r\n        this.setState({\r\n          qualifyingResults: response.data.MRData.RaceTable.Races[0],\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      activeTab,\r\n      raceResults,\r\n      qualifyingResults,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {raceResults && raceResults !== null ? (\r\n          <>\r\n            <h1 className=\"text-center mt-5 text-light\">{`${raceResults.season} ${raceResults.raceName}`}</h1>\r\n          </>\r\n        ) :\r\n        (\r\n          <>\r\n            <div className=\"text-center mt-5\">\r\n              <div className=\"spinner-border text-warning\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n        <div className=\"container\">\r\n          <ul className=\"nav nav-tabs\">\r\n            {/* RACE RESULTS TAB */}\r\n            <li\r\n              className=\"nav-item\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  activeTab: 'R'\r\n                })\r\n              }}\r\n            >\r\n              <a\r\n                className={`nav-link ${activeTab === 'R' ? 'active' : ''}`}\r\n              >\r\n                Race\r\n              </a>\r\n            </li>\r\n\r\n            {/* QUALIFYING RESULTS TAB */}\r\n            <li\r\n              className=\"nav-item\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  activeTab: 'Q'\r\n                })\r\n              }}\r\n            >\r\n              <a\r\n                className={`nav-link ${activeTab === 'Q' ? 'active' : ''}`}\r\n              >\r\n                Qualifying\r\n              </a>\r\n            </li>\r\n\r\n            {/* FASTEST LAPS RESULTS TAB */}\r\n            <li\r\n              className=\"nav-item\"\r\n              onClick={() => {\r\n                this.setState({\r\n                  activeTab: 'F'\r\n                })\r\n              }}\r\n            >\r\n              <a\r\n                className={`nav-link ${activeTab === 'F' ? 'active' : ''}`}\r\n              >\r\n                Fastest Laps\r\n              </a>\r\n            </li>\r\n          </ul>\r\n\r\n          {activeTab === 'R' ? (\r\n            <Race\r\n              raceResults={raceResults} />\r\n          ) : (activeTab === 'Q' ? (\r\n            <Qualifying\r\n              qualifyingResults={qualifyingResults} />\r\n          ) : (activeTab === 'F' ? (\r\n            <FastestLap\r\n              raceResults={raceResults} />\r\n          ) : (<></>)))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Schedule from './components/Schedule';\nimport Nav from './components/Nav';\nimport Constructor from './components/Constructor';\nimport Results from './components/Results';\n\nfunction App() {\n  const appUri = '/formula1-season-tracker';\n\n  return (\n    <>\n      <Router>\n        <Nav constUri={appUri}/>\n        <Switch>\n          <Route path={`${appUri}`} exact component={Home} />\n          <Route path=\"/\" exact component={Home} />\n          <Route path={`${appUri}/constructor`} exact component={Constructor} />\n          <Route path={`${appUri}/schedule`} exact component={Schedule} />\n          <Route path={`${appUri}/results/:roundId`} exact component={Results} />\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}